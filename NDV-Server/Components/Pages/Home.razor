@page "/"
@rendermode InteractiveServer

@using System.Text.Json
@using System.Threading
@using DRX.Framework
@using DRX.Framework.Common
@using DRX.Framework.Common.Components
@using DRX.Framework.Common.Enums.Packet
@using DRX.Framework.Common.Models
@using DRX.Framework.Common.Utility
@using DRX.Framework.Blazor.Common.UI
<PageTitle>主页</PageTitle>

@if (_showDialog)
{
    <DRXDialog ButtonText="关闭" OnButtonClick="HideDialog" OnClose="HideDialog">
        <Header>
            <h4>信息</h4>
            <hr />
        </Header>
        <Content>
            <div class="dialog-div">
                <a>用户名: @(GetSelectSocket() != null ? GetUserName(GetSelectSocket()) : "N/A")</a>
                <a>唯一UID: @(GetSelectSocket() != null ? GetUserUid(GetSelectSocket()) : "N/A")</a>
                <a>邮箱: @(GetSelectSocket() != null ? GetUserEmail(GetSelectSocket()) : "N/A")</a>
            </div>
            <hr />
        </Content>
    </DRXDialog>
}

<h3>在线</h3>
<table class="table">
    <thead>
        <tr>
            <DRXTableHeader Width="45px">
                <DRXCheckBox @bind-IsChecked="_selectAll" />
            </DRXTableHeader>
            <DRXTableHeader>客户端ID</DRXTableHeader>
            <DRXTableHeader>客户端IP</DRXTableHeader>
        </tr>
    </thead>
    <tbody>
        @if (_clients != null && _clients.Any())
        {
            @foreach (var client in _clients)
            {
                <tr>
                    <DRXTableData>
                        <DRXCheckBox @bind-IsChecked="client.IsSelected" />
                    </DRXTableData>
                    <DRXTableData>@GetUserId(client)</DRXTableData>
                    <DRXTableData>@(client.SafeHandle?.IsClosed ?? true ? "已断开连接" : client.RemoteEndPoint?.ToString())</DRXTableData>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">暂无在线客户端</td>
            </tr>
        }
    </tbody>
</table>

@* 按钮 *@

<div style="display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: center;
    justify-content: flex-start;
    align-items: center;">
    <DRXButton @onclick="DisconnectSelectedClients">断开选中客户端</DRXButton>
    <DRXButton @onclick="BanSelectedClients">封禁选中客户端的账号</DRXButton>
    <DRXButton @onclick="ShowInfoDialog">查看详细</DRXButton>
</div>

<hr />

@* 封禁列表 *@

<h3>封禁</h3>
<table class="table">
    <thead>
        <tr>
            <DRXTableHeader>用户名</DRXTableHeader>
            <DRXTableHeader>封禁日期</DRXTableHeader>
            <DRXTableHeader>解封日期</DRXTableHeader>
        </tr>
    </thead>
    <tbody>
        @if (_bannedClients.Any())
        {
            @foreach (var bannedClient in _bannedClients)
            {
                <tr>
                    <DRXTableData>@bannedClient?.Name</DRXTableData>
                    <DRXTableData>@bannedClient?.BanndedDate.ToString("yyyy-MM-dd HH:mm:ss")</DRXTableData>
                    <DRXTableData>@bannedClient?.UnBandedDate.ToString("yyyy-MM-dd HH:mm:ss")</DRXTableData>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">暂无封禁的客户端</td>
            </tr>
        }
    </tbody>
</table>

@code {



    private HashSet<DRXSocket>? _clients;
    private List<ClientComponent?> _bannedClients = [];
    private bool _selectAll;
    private bool _showDialog;

    protected override async Task OnInitializedAsync()
    {
        _clients = SocketServer.GetConnectedSockets();
        await LoadBannedClientsAsync();
    }

    private async Task LoadBannedClientsAsync()
    {
        try
        {
            // 读取封禁列表中的所有UID
            var bannedUiDs = new List<string>();
            if (System.IO.File.Exists(DrxFile.BanPath))
            {
                var bannedList = await DrxFile.LoadFromJsonAsync<Dictionary<string, DateTime>>(DrxFile.BanPath);
                if (bannedList != null)
                {
                    bannedUiDs = bannedList.Keys.ToList();
                }
            }

            // 在用户路径中找到对应的UID.json文件
            var userFiles = Directory.GetFiles(DrxFile.UserPath, "*.json");
            var loadTasks = userFiles
                .Where(file => bannedUiDs.Contains(Path.GetFileNameWithoutExtension(file)))
                .Select(DrxFile.LoadFromJsonAsync<ClientComponent?>);
            var clientComponents = await Task.WhenAll(loadTasks);

            _bannedClients = clientComponents
                .Where(cc => cc is { IsBannded: true })
                .ToList();
        }
        catch (Exception ex)
        {

            // 如果错误类型为文件未找到，则创建路径。
            if (ex is DirectoryNotFoundException)
            {
                Directory.CreateDirectory(DrxFile.UserPath);
                await DrxFile.CreateFileAsync(DrxFile.BanPath);
            }

            if (ex is JsonException)
            {
                Logger.Warring($"在读取封禁列表时发生错误: {ex.Message}");
            }

            Logger.Error($"页面初始化发生意想不到的错误: {ex.Message}");
        }
    }


    private void ToggleSelectAll()
    {
        _selectAll = !_selectAll;
        if (_clients == null) return;
        foreach (var client in _clients)
        {
            client.IsSelected = _selectAll;
        }
    }

    private DRXSocket? GetSelectSocket()
    {
        return _clients?.FirstOrDefault(c => c.IsSelected);
    }

    private static int GetUserId(DRXSocket? client)
    {
        if (client == null)
            return 0;

        var component = client.GetComponent<ClientComponent>();
        return component?.Id ?? 0;
    }

    private static string? GetUserName(DRXSocket? client)
    {
        if (client == null)
            return "N/A";

        var component = client.GetComponent<ClientComponent>();
        return component?.Name ?? "N/A";
    }

    private static string? GetUserEmail(DRXSocket? client)
    {
        if (client == null)
            return "N/A";

        var component = client.GetComponent<ClientComponent>();
        return component?.Email ?? "N/A";
    }

    private static string? GetUserUid(DRXSocket? client)
    {
        if (client == null)
            return "N/A";

        var component = client.GetComponent<ClientComponent>();
        return component?.UID ?? "N/A";
    }

    private void DisconnectSelectedClients()
    {
        if (_clients == null) return;

        var selectedClients = _clients.Where(c => c.IsSelected).ToList();
        foreach (var client in selectedClients)
        {
            var component = client.GetComponent<ClientComponent>();
            component?.SaveToFile(DrxFile.UserPath);

            var packet = new DRXPacket()
            {
                Headers =
                {
                    { PacketHeaderKey.Type, PacketTypes.Message}
                },
                Data = 
                {
                    { PacketBodyKey.Message, "client_disconnected"}
                }
            };
            var key = SocketServer.Server.GetKey();
            if (key != null) SocketServer.Server.Send(client, packet, key);

            client.Close();
        }
    }

    private void BanSelectedClients()
    {
        if (_clients == null) return;

        var selectedClients = _clients.Where(c => c.IsSelected).ToList();
        foreach (var client in selectedClients)
        {
            var component = client.GetComponent<ClientComponent>();
            if (component != null)
            {
                SocketServer.Server.BlockClient(client, 1);
            }
        }
    }

    private void ShowInfoDialog()
    {
        _showDialog = true;
    }

    private void HideDialog()
    {
        _showDialog = false;
    }
}
