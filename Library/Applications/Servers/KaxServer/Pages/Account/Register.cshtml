@page
@model KaxServer.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "注册账号";
}

<div class="container" style="min-height: calc(100vh - var(--nav-height)); display: flex; align-items: center; justify-content: center; padding: 2rem 0;">
    <!-- 添加提示框容器 -->
    <div id="alertBox" class="alert-box" style="display: none;">
        <div class="alert-content">
            <i class="fas fa-exclamation-circle alert-icon"></i>
            <span id="alertMessage"></span>
            <button class="alert-close" onclick="closeAlert()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <div class="form-card">
        <div class="form-header">
            <h1 class="form-title">创建新账号</h1>
            <p class="form-subtitle">加入我们，开启您的专属旅程</p>
        </div>
        
        <div asp-validation-summary="ModelOnly" class="text-danger" style="margin-bottom: 1rem; text-align: center;"></div>

        <form method="post" asp-page-handler="Register">
            <div class="form-group">
                <div class="input-wrapper">
                    <i class="fas fa-user input-icon"></i>
                    <input type="text" class="form-control with-icon" id="username" name="userName" placeholder="用户名" required>
                    <i class="validation-icon" id="usernameIcon"></i>
                </div>
                <div class="validation-message" id="usernameValidation"></div>
            </div>

            <div class="form-group">
                <div class="input-wrapper">
                    <i class="fas fa-envelope input-icon"></i>
                    <input type="email" class="form-control with-icon" id="email" name="email" placeholder="电子邮箱" required>
                    <i class="validation-icon" id="emailIcon"></i>
                </div>
                <div class="validation-message" id="emailValidation"></div>
            </div>

            <div class="form-group">
                <div class="input-wrapper">
                    <i class="fas fa-lock input-icon"></i>
                    <input type="password" class="form-control with-icon" id="password" name="password" placeholder="密码" required>
                    <i class="validation-icon" id="passwordIcon"></i>
                </div>
                <div class="validation-message" id="passwordValidation"></div>
            </div>

            <div class="form-group">
                <div class="input-wrapper">
                    <i class="fas fa-lock input-icon"></i>
                    <input type="password" class="form-control with-icon" id="confirmPassword" name="confirmPassword" placeholder="确认密码" required>
                    <i class="validation-icon" id="confirmPasswordIcon"></i>
                </div>
                <div class="validation-message" id="confirmPasswordValidation"></div>
            </div>

            <div class="form-group">
                <div class="input-wrapper verification-code-wrapper">
                    <i class="fas fa-key input-icon"></i>
                    <input type="text" class="form-control with-icon with-button" id="verificationCode" name="verificationCode" placeholder="验证码" required>
                    <button type="button" id="sendVerificationCode" class="btn-send-code">发送验证码</button>
                </div>
            </div>

            <button type="submit" class="btn-primary" style="margin-top: 1rem;">立即注册</button>
            
            <div class="form-divider">
                <span>或者</span>
            </div>

            <a href="/Account/Login" class="btn-link">返回登录</a>
        </form>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .btn-primary {
            width: 100%;
            display: block;
            cursor: pointer;
        }

        .text-danger {
            color: #ff6b6b;
        }

        .verification-code-wrapper {
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
        }

        .with-button {
            padding-right: 140px; /* 为按钮留出更多空间 */
        }

        .btn-send-code {
            position: absolute;
            right: 6px;
            top: 50%;
            transform: translateY(-50%);
            padding: 0.6rem 1.2rem;
            background: linear-gradient(45deg, var(--accent-color), var(--accent-color-hover));
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: var(--border-radius-md);
            cursor: pointer;
            font-weight: 600;
            font-size: 0.875rem;
            letter-spacing: 0.5px;
            transition: all 0.25s ease-out;
            box-shadow: 0 0 15px rgba(124, 77, 255, 0.3),
                        inset 0 0 5px rgba(255, 255, 255, 0.2);
            text-transform: uppercase;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 120px;
        }

        .btn-send-code:hover {
            transform: translateY(-50%) scale(1.02);
            box-shadow: 0 0 25px rgba(124, 77, 255, 0.5),
                        inset 0 0 8px rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .btn-send-code:active {
            transform: translateY(-50%) scale(0.98);
            box-shadow: 0 0 10px rgba(124, 77, 255, 0.2),
                        inset 0 0 10px rgba(0, 0, 0, 0.3);
            transition-duration: 0.1s;
        }

        .btn-send-code:disabled {
            background: linear-gradient(45deg, #2a2b2c, #3a3b3c);
            color: var(--secondary-color);
            cursor: not-allowed;
            box-shadow: none;
            border-color: var(--border-color);
        }

        .btn-send-code:disabled:hover {
            transform: translateY(-50%);
            box-shadow: none;
            border-color: var(--border-color);
        }

        /* 倒计时动画 */
        @@keyframes countdown {
            from {
                transform: translateY(-50%) scale(1);
            }
            to {
                transform: translateY(-50%) scale(0.95);
            }
        }

        .btn-send-code.counting {
            animation: countdown 1s ease-in-out infinite alternate;
        }

        /* 验证消息样式 */
        .validation-message {
            font-size: 0.875rem;
            margin-top: 0.25rem;
            min-height: 1.25rem;
            transition: all 0.3s ease;
            padding-left: 0.5rem;
        }

        .validation-message.error {
            color: #ff6b6b;
        }

        .validation-message.success {
            color: #51cf66;
        }

        .form-control.error {
            border-color: #ff6b6b;
            box-shadow: 0 0 0 2px rgba(255, 107, 107, 0.2);
        }

        .form-control.success {
            border-color: #51cf66;
            box-shadow: 0 0 0 2px rgba(81, 207, 102, 0.2);
        }

        /* 验证图标样式 */
        .validation-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1rem;
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 2;
        }

        .validation-icon.show {
            opacity: 1;
        }

        .validation-icon.success {
            color: #51cf66;
        }

        .validation-icon.error {
            color: #ff6b6b;
        }

        .form-control.with-icon {
            padding-right: 2.5rem;
        }

        .form-control.with-button {
            padding-right: 140px;
        }

        .form-control.with-button.with-icon {
            padding-right: 150px;
        }

        /* 提示框样式 */
        .alert-box {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        .alert-content {
            background-color: #ff6b6b;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            min-width: 300px;
        }

        .alert-icon {
            font-size: 20px;
        }

        .alert-close {
            margin-left: auto;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 0;
            font-size: 16px;
            opacity: 0.8;
            transition: opacity 0.2s;
        }

        .alert-close:hover {
            opacity: 1;
        }

        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @@keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    </style>
}

@section Scripts {
    <script>
        // 显示提示框
        function showAlert(message) {
            const alertBox = document.getElementById('alertBox');
            const alertMessage = document.getElementById('alertMessage');
            
            alertMessage.textContent = message;
            alertBox.style.display = 'block';
            alertBox.style.animation = 'slideIn 0.3s ease-out';

            // 5秒后自动关闭
            setTimeout(() => {
                closeAlert();
            }, 5000);
        }

        // 关闭提示框
        function closeAlert() {
            const alertBox = document.getElementById('alertBox');
            alertBox.style.animation = 'slideOut 0.3s ease-out';
            setTimeout(() => {
                alertBox.style.display = 'none';
            }, 300);
        }

        // 验证函数
        function validateUserName(userName) {
            const regex = /^[\u4e00-\u9fa5_a-zA-Z0-9]{2,32}$/;
            return regex.test(userName);
        }

        function validatePassword(password) {
            if (!password || password.length < 6 || password.length > 64) return false;
            const hasUpper = /[A-Z]/.test(password);
            const hasLower = /[a-z]/.test(password);
            const hasDigit = /\d/.test(password);
            return hasUpper && hasLower && hasDigit;
        }

        function validateEmail(email) {
            const regex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            return regex.test(email);
        }

        // 显示验证消息
        function showValidation(elementId, message, isError = true) {
            const element = document.getElementById(elementId);
            const iconElement = document.getElementById(elementId.replace('Validation', 'Icon'));
            
            element.textContent = message;
            element.className = `validation-message ${isError ? 'error' : 'success'}`;
            
            if (iconElement) {
                iconElement.className = `validation-icon ${isError ? 'error' : 'success'} fas ${isError ? 'fa-times' : 'fa-check'} show`;
            }
        }

        // 清除验证消息
        function clearValidation(elementId) {
            const element = document.getElementById(elementId);
            const iconElement = document.getElementById(elementId.replace('Validation', 'Icon'));
            
            element.textContent = '';
            element.className = 'validation-message';
            
            if (iconElement) {
                iconElement.className = 'validation-icon';
            }
        }

        // 实时验证
        document.getElementById('username').addEventListener('input', function(e) {
            const value = e.target.value;
            const input = e.target;
            
            if (value.length === 0) {
                clearValidation('usernameValidation');
                input.classList.remove('error', 'success');
            } else if (!validateUserName(value)) {
                showValidation('usernameValidation', '用户名仅支持中英文、数字、下划线，长度2-32位', true);
                input.classList.add('error');
                input.classList.remove('success');
            } else {
                showValidation('usernameValidation', '用户名格式正确', false);
                input.classList.add('success');
                input.classList.remove('error');
            }
        });

        document.getElementById('email').addEventListener('input', function(e) {
            const value = e.target.value;
            const input = e.target;
            
            if (value.length === 0) {
                clearValidation('emailValidation');
                input.classList.remove('error', 'success');
            } else if (!validateEmail(value)) {
                showValidation('emailValidation', '请输入正确的邮箱格式', true);
                input.classList.add('error');
                input.classList.remove('success');
            } else {
                showValidation('emailValidation', '邮箱格式正确', false);
                input.classList.add('success');
                input.classList.remove('error');
            }
        });

        document.getElementById('password').addEventListener('input', function(e) {
            const value = e.target.value;
            const input = e.target;
            
            if (value.length === 0) {
                clearValidation('passwordValidation');
                input.classList.remove('error', 'success');
            } else if (!validatePassword(value)) {
                showValidation('passwordValidation', '密码需包含大小写字母、数字，长度6-64位', true);
                input.classList.add('error');
                input.classList.remove('success');
            } else {
                showValidation('passwordValidation', '密码强度符合要求', false);
                input.classList.add('success');
                input.classList.remove('error');
            }
            
            // 同时验证确认密码
            const confirmPassword = document.getElementById('confirmPassword');
            if (confirmPassword.value) {
                if (confirmPassword.value !== value) {
                    showValidation('confirmPasswordValidation', '两次输入的密码不一致', true);
                    confirmPassword.classList.add('error');
                    confirmPassword.classList.remove('success');
                } else {
                    showValidation('confirmPasswordValidation', '密码确认正确', false);
                    confirmPassword.classList.add('success');
                    confirmPassword.classList.remove('error');
                }
            }
        });

        document.getElementById('confirmPassword').addEventListener('input', function(e) {
            const value = e.target.value;
            const password = document.getElementById('password').value;
            const input = e.target;
            
            if (value.length === 0) {
                clearValidation('confirmPasswordValidation');
                input.classList.remove('error', 'success');
            } else if (value !== password) {
                showValidation('confirmPasswordValidation', '两次输入的密码不一致', true);
                input.classList.add('error');
                input.classList.remove('success');
            } else {
                showValidation('confirmPasswordValidation', '密码确认正确', false);
                input.classList.add('success');
                input.classList.remove('error');
            }
        });

        // 表单提交验证
        document.querySelector('form').addEventListener('submit', function(e) {
            const userName = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const email = document.getElementById('email').value;
            const verificationCode = document.getElementById('verificationCode').value;
            
            let hasError = false;

            // 验证用户名
            if (!validateUserName(userName)) {
                showValidation('usernameValidation', '用户名格式不正确');
                document.getElementById('username').classList.add('error');
                hasError = true;
            }

            // 验证密码
            if (!validatePassword(password)) {
                showValidation('passwordValidation', '密码格式不正确');
                document.getElementById('password').classList.add('error');
                hasError = true;
            }

            // 验证邮箱
            if (!validateEmail(email)) {
                showValidation('emailValidation', '邮箱格式不正确');
                document.getElementById('email').classList.add('error');
                hasError = true;
            }

            // 验证确认密码
            if (password !== confirmPassword) {
                showValidation('confirmPasswordValidation', '两次输入的密码不一致');
                document.getElementById('confirmPassword').classList.add('error');
                hasError = true;
            }

            // 验证验证码
            if (!verificationCode) {
                showAlert('请输入验证码');
                hasError = true;
            }

            if (hasError) {
                e.preventDefault();
                return;
            }
        });

        // 验证码发送功能
        document.getElementById('sendVerificationCode').addEventListener('click', async function() {
            const email = document.getElementById('email').value;
            if (!email) {
                showAlert('请先输入邮箱地址');
                return;
            }

            if (!validateEmail(email)) {
                showAlert('请输入正确的邮箱格式');
                return;
            }

            const button = this;
            button.disabled = true;
            button.classList.add('counting');
            let countdown = 60;

            try {
                const response = await fetch('/Account/Register?handler=SendVerificationCode', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ email: email })
                });

                const result = await response.json();
                if (result.success) {
                    showAlert('验证码已发送到您的邮箱');
                    // 开始倒计时
                    const timer = setInterval(() => {
                        button.textContent = `${countdown}秒`;
                        countdown--;

                        if (countdown < 0) {
                            clearInterval(timer);
                            button.disabled = false;
                            button.classList.remove('counting');
                            button.textContent = '发送验证码';
                        }
                    }, 1000);
                } else {
                    showAlert(result.message || '验证码发送失败');
                    button.disabled = false;
                    button.classList.remove('counting');
                }
            } catch (error) {
                showAlert('发送验证码时出现错误');
                button.disabled = false;
                button.classList.remove('counting');
            }
        });

        // 如果存在ModelState错误，显示第一个错误
        @if (!ModelState.IsValid)
        {
            <text>
            window.onload = function() {
                const error = '@Html.Raw(ModelState.Values.FirstOrDefault()?.Errors.FirstOrDefault()?.ErrorMessage)';
                if (error) {
                    showAlert(error);
                }
            };
            </text>
        }
    </script>
}
