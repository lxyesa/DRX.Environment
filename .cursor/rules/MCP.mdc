---
description: 
globs: 
alwaysApply: true
---
# 核心开发工作流规则

## 规则
- 调用工具时若出错，请尝试修正参数、工具名。


## Sequential Thinking（分步问题解决框架）

使用 @Sequential Thinking工具，指导分步骤地解决问题，尤其适用于复杂、开放式任务。

- 使用 Sequential Thinking 协议将任务拆解为**思维步骤**。
- 每一步遵循以下结构：
  1. 明确当前目标或假设（如"评估身份验证选项"、"重构状态管理"）。
  2. 根据上下文选择合适的 MCP 工具（如 `search_docs`、`code_generator`、`error_explainer`）。
  3. 清晰地记录结果/输出。
  4. 确定下一步思考目标，继续推进。
- 存在不确定性时：
  - 可通过"分支思考"探索多种解决路径。
  - 比较权衡不同策略或方案。
  - 允许回滚或编辑前序思维步骤。
- 可用元数据包括（参数）：
  -`thought`：当前思维内容
  -`thoughtNumber`：当前步骤编号
  -`totalThoughts`：预计总步骤数


### 1. 强制使用序贯思维 (Sequential Thinking)

对于所有涉及**多个步骤**或**复杂逻辑**的开发请求，**必须**首先使用 `@Sequential Thinking` 工具进行任务拆解和规划。这包括但不限于以下场景：

- **多文件修改**: 任何需要修改超过一个文件的请求。
- **新功能创建**: 从零开始添加新的类、页面、组件或功能模块。
- **代码重构**: 对现有代码的结构、逻辑或设计进行重要调整。
- **复杂问题排查**: 需要分析日志、追踪调用栈或进行多步验证才能解决的 Bug。
- **开放式探索任务**: 当请求是模糊的或需要进行设计决策时，例如"优化这个页面的性能"或"让这个表单更具交互性"。

在启动 `@Sequential Thinking` 时，第一步（Thought 1）应始终是 **"分析需求并规划后续步骤"**。

### 2. 例外情况

对于目标明确、范围极小的**单文件修改**，可以不使用 `@Sequential Thinking`，直接调用 `edit_file` 或其他适当的工具。例如：

- 修改一个变量名。
- 更改一个UI元素的文本或颜色。
- 在单个文件中添加或删除一个简单的函数。

### 3. 任务示例

- **必须使用MCP的例子**: "将用户认证从 Session 模式重构为 JWT 模式。" -> (这涉及多文件修改、新逻辑和重构，必须使用序贯思维。)
- **可以不使用MCP的例子**: "将 `_ForumManagement.cshtml` 文件中板块图标的颜色从 `#495057` 改回 `#212529`。" -> (这是简单的单文件修改，可以直接执行。)
- **绝对命令的例子**: "/seq 将用户认证从 Session 模式重构为 JWT 模式。" -> (这涉及绝对命令，无论如何都应该使用序贯思维。)


---

### **强制使用 Context7 MCP 规则书**

#### 核心规则

在处理任何与编程库（Library）、框架（Framework）、SDK或外部API相关的问题时，**必须强制使用 `context7` 系列工具** (`resolve-library-id`, `get-library-docs`) 来获取最新、最权威的官方文档。

此规则的核心目标是根除因模型自身知识库陈旧或不完整而导致的错误和过时回答，确保提供给用户的信息是可靠的。

#### 例外情况

仅在一种情况下可以不使用 `context7`：

*   当且仅当，所需知识**直接来源于当前对话中、刚刚通过 `context7` 成功获取并验证过的信息**，并且你对该信息的转述拥有百分之百的绝对把握。

除此以外，任何依赖模型内部固有知识的回答，无论看起来多么肯定，都必须通过调用 `context7` 重新验证。

#### 执行准则

1.  **自动触发**：一旦识别出用户请求涉及任何外部库或API（例如 "如何使用 `antd` 的 `Form` 组件？"、"`Next.js` 的路由原理是什么？"、"查询 `axios` 的超时配置"），应立即将 `context7` 的使用作为解决问题的第一步。

2.  **杜绝猜测**：严禁基于记忆或训练数据进行任何形式的猜测。对于API用法、函数签名、版本差异、配置参数等具体细节，必须永远信赖实时获取的官方文档。

3.  **标准流程**：
    *   **第一步：解析库ID** - 使用 `resolve-library-id` 工具，根据用户的提问确认唯一的、准确的库标识符。
    *   **第二步：获取文档** - 使用 `get-library-docs` 工具，并提供明确的查询主题（`topic`），以检索最相关的内容片段。
    *   **第三步：基于文档回答** - **必须完全基于**从 `get-library-docs` 返回的文档内容来构建给用户的最终回答和代码示例。

4.  **绝对命令**：当用户的请求中包含 `/ct7` 指令时，代表用户强制要求使用Context7进行查询，此时必须无条件优先执行 `context7` 的标准流程。

